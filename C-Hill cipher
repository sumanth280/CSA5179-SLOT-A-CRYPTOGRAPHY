#include <stdio.h>
int findDeterminant(int mat[][2]) {
    return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
}
int findModularInverse(int num, int m) {
    num = num % m;
    int x;
    for ( x = 1; x < m; x++) {
        if ((num * x) % m == 1) {
            return x;
        }
    }
    return -1; 
}
void findInverseKey(int key[][2], int inv_key[][2], int det_inverse) {
    inv_key[0][0] = key[1][1] * det_inverse % 26;
    inv_key[0][1] = (-key[0][1] * det_inverse + 26) % 26;
    inv_key[1][0] = (-key[1][0] * det_inverse + 26) % 26;
    inv_key[1][1] = key[0][0] * det_inverse % 26;
}
void matrix_multiply(int mat[][2], int vec[], int result[]) {
    result[0] = (mat[0][0] * vec[0] + mat[0][1] * vec[1]) % 26;
    result[1] = (mat[1][0] * vec[0] + mat[1][1] * vec[1]) % 26;
}
int main() {
    int key[2][2];
    int inv_key[2][2];
    int plaintext[20];
    int ciphertext[20];
    int i,j;
    printf("Enter the key matrix (2x2):\n");
    for ( i = 0; i < 2; i++) {
        for ( j = 0; j < 2; j++) {
            scanf("%d", &key[i][j]);
        }
    }
    int det = findDeterminant(key);
    int det_inverse = findModularInverse(det, 26);
    if (det_inverse == -1) {
        return 1;
    }
    findInverseKey(key, inv_key, det_inverse);
    printf("Inverse Key Matrix: \n");
    for ( i = 0; i < 2; i++) {
        for ( j = 0; j < 2; j++) {
            printf("%d ", inv_key[i][j]);
        }
    }
    printf("\nEnter the plaintext (up to 20 characters in uppercase): ");
    char msg[21]; 
    scanf("%s", msg);
    int len = strlen(msg);
    for ( i = 0; i < len; i++) {
        plaintext[i] = msg[i] - 'A';
    }
    int encrypted_len = len;
    if (encrypted_len % 2 != 0) {
        while (encrypted_len % 2 != 0) {
            plaintext[encrypted_len] = 'X' - 'A';
            encrypted_len++;
        }
    }
    printf("\nEncrypted Cipher Text: ");
    for ( i = 0; i < encrypted_len; i += 2) {
        int cipher_block[2];
        matrix_multiply(key, plaintext + i, cipher_block);
        for ( j = 0; j < 2; j++) {
            ciphertext[i + j] = cipher_block[j];
            printf("%c", cipher_block[j] + 'A');
        }
    }
    printf("\nDecrypted Cipher Text: ");
    for ( i = 0; i < encrypted_len; i += 2) {
        int plain_block[2];
        matrix_multiply(inv_key, ciphertext + i,plain_block);
        for ( j = 0; j < 2; j++) {
            printf("%c", plain_block[j] + 'A');
        }
    }
    printf("\n");
    return 0;
}
